name: Test Examples

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  GOVERSION: "1.17"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        example:
          - apex
          - apl
          - ingestevent
          - ingestfile
          - logrus
          - query
          - zap
        include:
          - example: apex
            verify: |
              axiom dataset info $AXIOM_DATASET -f=json | jq -e 'any( .numEvents ; . == 3 )'
          - example: apl
            setup: |
              echo '[{"mood":"hyped","msg":"This is awesome!"}]' >> logs.json
              axiom ingest $AXIOM_DATASET -f=logs.json -f=logs.json -f=logs.json
              sleep 5
          - example: ingestevent
            verify: |
              axiom dataset info $AXIOM_DATASET -f=json | jq -e 'any( .numEvents ; . == 1 )'
          - example: ingestfile
            setup: |
              echo '[{"mood":"hyped","msg":"This is awesome!"}]' >> logs.json
            verify: |
              axiom dataset info $AXIOM_DATASET -f=json | jq -e 'any( .numEvents ; . == 1 )'
          - example: logrus
            verify: |
              axiom dataset info $AXIOM_DATASET -f=json | jq -e 'any( .numEvents ; . == 3 )'
          - example: query
            setup: |
              echo '[{"mood":"hyped","msg":"This is awesome!"}]' >> logs.json
              axiom ingest $AXIOM_DATASET -f=logs.json -f=logs.json -f=logs.json
              sleep 5
          - example: zap
            verify: |
              axiom dataset info $AXIOM_DATASET -f=json | jq -e 'any( .numEvents ; . == 3 )'
      fail-fast: false
    env:
      AXIOM_DATASET: test-axiom-go-examples-${{ github.run_id }}-${{ matrix.example }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOVERSION }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - uses: axiomhq/setup-axiom@v1
        id: axiom
      - run: |
          echo "AXIOM_URL=${{ steps.axiom.outputs.url }}" >> $GITHUB_ENV
          echo "AXIOM_TOKEN=${{ steps.axiom.outputs.token }}" >> $GITHUB_ENV
      - name: Setup
        run: |
          curl -sL $(curl -s https://api.github.com/repos/axiomhq/cli/releases/latest | grep "http.*linux_amd64.tar.gz" | awk '{print $2}' | sed 's|[\"\,]*||g') | tar xzvf - --strip-components=1 --wildcards -C /usr/local/bin "axiom_*_linux_amd64/axiom"
          axiom dataset create -n=$AXIOM_DATASET -d="Axiom Go ${{ matrix.example }} example test"
      - name: Setup example
        if: matrix.setup
        run: ${{ matrix.setup }}
      - name: Run example
        run: go run ./examples/${{ matrix.example }}/main.go
      - name: Verify example
        if: matrix.verify
        run: ${{ matrix.verify }}
      - name: Cleanup
        if: always()
        run: axiom dataset delete -f $AXIOM_DATASET

  examples-pass:
    name: Create Examples Pass Check
    needs: test
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: LouisBrunner/checks-action@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Examples Pass
          conclusion: ${{ needs.test.result }}
      # Fail workflow if resulting check is also created as failed.
      - if: ${{ needs.test.result != 'success' }}
        run: exit 1
